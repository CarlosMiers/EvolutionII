/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Clases.Config;
import Clases.Job;
import Clases.jcThread;
import Conexion.Conexion;
import DAO.cuenta_clienteDAO;
import DAO.deudaDAO;
import Modelo.Tablas;
import Modelo.cuenta_clientes;
import Modelo.deudas;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.TableRowSorter;
import org.openide.util.Exceptions;

/**
 *
 * @author hp
 */
public class actualizar_web extends javax.swing.JFrame {

    /**
     * Creates new form actualizar_web
     */
    Conexion con = null;
    Statement stm, stPE, stPP, stmora, st2, st3 = null;
    Tablas modelo = new Tablas();
    JScrollPane scroll = new JScrollPane();
    private TableRowSorter trsfiltro;
    String cSql, cSqlPE, cSqlPP = null;

    String cedula_ruc, nombre_apellido, numero_operacion, descripcion_operacion = null;
    String numero_factura, nro_cuota, moneda, monto = null;
    String fecha_venc, estado, iddocumento, ultimo_pago, tipoop = null;

    String cSaldo, cMora, cGastos, cIdDocumento, catraso, cPunitorio = null;
    double nTasaPunitoria, nPunitorio, nMora, nInteres, nDiaMora, nGastos, nSaldo, nDiasGracia, nDiasGraciaGastos, natraso = 0.00;
    DecimalFormat formato = new DecimalFormat("#,###.##");

    public actualizar_web() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelTask1 = new org.edisoncor.gui.label.LabelTask();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        etiqueta = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        cliente = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        nombrecliente = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        labelTask1.setText(org.openide.util.NbBundle.getMessage(actualizar_web.class, "actualizar_web.labelTask1.text")); // NOI18N
        labelTask1.setDescription(org.openide.util.NbBundle.getMessage(actualizar_web.class, "actualizar_web.labelTask1.description")); // NOI18N

        jButton1.setText(org.openide.util.NbBundle.getMessage(actualizar_web.class, "actualizar_web.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        etiqueta.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        etiqueta.setText(org.openide.util.NbBundle.getMessage(actualizar_web.class, "actualizar_web.etiqueta.text")); // NOI18N

        jProgressBar1.setForeground(new java.awt.Color(153, 153, 255));

        cliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cliente.setText(org.openide.util.NbBundle.getMessage(actualizar_web.class, "actualizar_web.cliente.text")); // NOI18N
        cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clienteActionPerformed(evt);
            }
        });
        cliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                clienteKeyPressed(evt);
            }
        });

        jButton2.setText(org.openide.util.NbBundle.getMessage(actualizar_web.class, "actualizar_web.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        nombrecliente.setEditable(false);
        nombrecliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        nombrecliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        nombrecliente.setText(org.openide.util.NbBundle.getMessage(actualizar_web.class, "actualizar_web.nombrecliente.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(etiqueta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(125, 125, 125))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(nombrecliente, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(etiqueta)
                .addGap(18, 18, 18)
                .addComponent(cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(nombrecliente, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelTask1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(labelTask1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (this.cliente.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese la Cuenta del Cliente");
            this.cliente.requestFocus();
            return;
        }
        Object[] opciones = {"   Si   ", "   No   "};
        int ret = JOptionPane.showOptionDialog(null, "Desea Actualizar los Saldos en la WEB del Cliente? ", "Confirmaci√≥n", 0, 3, null, opciones, opciones[0]);
        if (ret == 0) {
            /*  PruebaCliente consultacliente = new PruebaCliente();
            Thread cncliente = new Thread(consultacliente);
            cncliente.start();*/
            GenerarCuentas consultacliente = new GenerarCuentas();
            Thread cncliente = new Thread(consultacliente);
            cncliente.start();
            new Thread(new Job(Integer.valueOf("5"))).start();
            new Thread(new jcThread(jProgressBar1, Integer.valueOf("50"))).start();

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clienteActionPerformed
        mostrarcliente mostrarcliente = new mostrarcliente();
        mostrarcliente.start();
        // TODO add your handling code here:
    }//GEN-LAST:event_clienteActionPerformed

    private void clienteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clienteKeyPressed
        if (evt.getKeyCode() == 10 || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            this.jButton1.requestFocus();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_clienteKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(actualizar_web.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(actualizar_web.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(actualizar_web.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(actualizar_web.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new actualizar_web().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cliente;
    private javax.swing.JLabel etiqueta;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private org.edisoncor.gui.label.LabelTask labelTask1;
    private javax.swing.JTextField nombrecliente;
    // End of variables declaration//GEN-END:variables

    private class PruebaCliente extends Thread {

        public void run() {
            con = new Conexion();
            stm = con.conectar();
            stPE = con.conectar();
            stPP = con.conectar();

            cSql = "SELECT creferencia,iddocumento,cuenta_clientes.cliente,clientes.ruc,clientes.nombre AS nombrecliente,";
            cSql = cSql + "documento,comprobantes.nombre as nombreoperacion,cuota,numerocuota,fecha_pago,comprobante,comprobantes.gastoscobros,";
            cSql = cSql + "cuenta_clientes.importe,cuenta_clientes.saldo,vencimiento,";
            cSql = cSql + "DATEDIFF(CURDATE(),vencimiento) AS diamora,0000.00 as diamoracue,cuenta_clientes.mora,DATEDIFF(CURDATE(),fecha_pago) AS di,cuenta_clientes.gastos_cobranzas,";
            cSql = cSql + "comprobantes.interespunitorio,comprobantes.diasgracia_gastos,comprobantes.diasgracia,cuenta_clientes.tasaoperativa as interesmora ";
            cSql = cSql + "FROM cuenta_clientes ";
            cSql = cSql + "INNER JOIN clientes ";
            cSql = cSql + "ON clientes.codigo=cuenta_clientes.cliente ";
            cSql = cSql + "INNER JOIN comprobantes ";
            cSql = cSql + "ON comprobantes.codigo=cuenta_clientes.comprobante ";
            cSql = cSql + "WHERE cuenta_clientes.saldo>1000 ";
            cSql = cSql + "AND comprobante IN (8,9,10) AND moneda=1 AND cliente= " + cliente.getText() + " ";
            cSql = cSql + "ORDER BY cuota";

            ResultSet results = null;
            try {
                stm.executeUpdate("DELETE FROM t_deudas WHERE cedula_ruc=" + cliente.getText());
                stm.executeUpdate("DELETE FROM practipagos WHERE cedula_ruc=" + cliente.getText());
                results = stm.executeQuery(cSql);
                while (results.next()) {
                    nGastos = 0.00;
                    nSaldo = 0.00;
                    nMora = 0.00;
                    nPunitorio = 0.00;

                    nTasaPunitoria = results.getDouble("interespunitorio");
                    cedula_ruc = results.getString("cliente");
                    nombre_apellido = results.getString("nombrecliente");
                    numero_operacion = results.getString("documento");
                    descripcion_operacion = results.getString("nombreoperacion");;
                    numero_factura = results.getString("documento");
                    nro_cuota = results.getString("cuota");
                    moneda = "PYG";
                    nSaldo = Math.round(results.getDouble("saldo"));
                    fecha_venc = results.getString("vencimiento");
                    estado = "PE";
                    iddocumento = results.getString("iddocumento");
                    ultimo_pago = results.getString("fecha_pago");
                    tipoop = results.getString("comprobante");
                    nInteres = results.getDouble("interesmora");
                    nDiaMora = results.getInt("diamora");
                    nDiasGracia = results.getInt("diasgracia");
                    nDiasGraciaGastos = results.getInt("diasgracia_gastos");
                    catraso = results.getString("di");
                    natraso = results.getInt("di");

                    if (nDiaMora > 0 && catraso != null) {
                        if (natraso <= nDiaMora) {
                            natraso = results.getInt("di");
                        } else {
                            natraso = nDiaMora;
                        }
                    } else {
                        natraso = nDiaMora;
                    }

                    //Calculamos los intereses
                    //Verificando antes si los Dias de Mora son mayores a los dias de Gracia
                    if (natraso > nDiasGracia) {
                        nMora = Math.round(nSaldo * ((nInteres / 100) / 360 * natraso));
                        if (Config.nIvaIncluido == 1) {
                            nMora = Math.round(nMora + (nMora * Config.porcentajeiva / 100));
                        }
                        if (nTasaPunitoria > 0 && nMora > 0) {
                            nPunitorio = Math.round(nMora * nTasaPunitoria / 100);
                        }
                    }

                    if (natraso > nDiasGraciaGastos) {
                        nGastos = results.getDouble("gastoscobros");
                    }

                    if (nGastos > 0) {
                        cGastos = Double.toString(nGastos);
                    } else {
                        cGastos = "0";
                    }
                    nSaldo = nSaldo + nMora + nGastos + nPunitorio;

                    cPunitorio = Double.toString(nPunitorio);
                    cSaldo = Double.toString(nSaldo);
                    cMora = Double.toString(nMora);

                    if (ultimo_pago == "(NULL)") {
                        ultimo_pago = "";
                    }

                    cSqlPP = "INSERT INTO practipagos(cedula_ruc, nombre_apellido, numero_operacion, descripcion_operacion,";
                    cSqlPP += "numero_factura, nro_cuota, moneda, monto,";
                    cSqlPP += "fecha_venc, estado, iddocumento, tipoop,gastos,mora,punitorio)";
                    cSqlPP += " VALUES ('" + cedula_ruc + "','" + nombre_apellido + "','" + numero_operacion + "','";
                    cSqlPP += descripcion_operacion + "','" + numero_factura + "','" + nro_cuota + "','" + moneda + "','";
                    cSqlPP += cSaldo + "','" + fecha_venc + "','" + estado + "','" + iddocumento + "','";
                    cSqlPP += tipoop + "','" + cGastos + "','" + cMora + "','" + cPunitorio + "')";
                    this.PractiPagos(cSqlPP);

                    cSqlPE = "INSERT INTO t_deudas(cedula_ruc, nombre_apellido, numero_operacion, descripcion_operacion,";
                    cSqlPE += "numero_factura, nro_cuota, moneda, monto,";
                    cSqlPE += "fecha_venc, estado, iddocumento,tipoop,gastos,mora,punitorio)";
                    cSqlPE += " VALUES ('" + cedula_ruc + "','" + nombre_apellido + "','" + numero_operacion + "','";
                    cSqlPE += descripcion_operacion + "','" + numero_factura + "','" + nro_cuota + "','" + moneda + "','";
                    cSqlPE += cSaldo + "','" + fecha_venc + "','" + estado + "','" + iddocumento + "','";
                    cSqlPE += tipoop + "','" + cGastos + "','" + cMora + "','" + cPunitorio + "')";
                    this.PagoExpress(cSqlPE);
                }
                stm.close();
                stPP.close();
                stPE.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(new JFrame(),
                        "El Sistema No Puede Ingresar a los Datos",
                        "Mensaje del Sistema", JOptionPane.ERROR_MESSAGE);
                System.out.println(ex);
            }
        }

        private void PractiPagos(String CadenaSql1) {
            try {
                stPP.executeUpdate(CadenaSql1);
            } catch (SQLException ex1) {
                Exceptions.printStackTrace(ex1);
            }
        }

        private void PagoExpress(String CadenaSql2) {
            try {
                stPE.executeUpdate(CadenaSql2);
            } catch (SQLException ex1) {
                Exceptions.printStackTrace(ex1);
            }
        }
    }

    private class mostrarcliente extends Thread {

        public void run() {
            con = new Conexion();
            stm = con.conectar();
            ResultSet results = null;
            try {
                results = stm.executeQuery("SELECT nombre from clientes where codigo=" + cliente.getText());
                while (results.next()) {
                    nombrecliente.setText(results.getString("nombre"));
                }
                stm.close();
            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
                System.out.println(ex);
            }
        }
    }

    private class GenerarCuentas extends Thread {

        public void run() {
            String detacuota = "[";
            cuenta_clienteDAO exDAO = new cuenta_clienteDAO();
            deudaDAO deuDAO = new deudaDAO();
            deudas de = null;
            try {
                for (cuenta_clientes ct : exDAO.CuentaPuertoSeguro(Integer.valueOf(cliente.getText()), Integer.valueOf(cliente.getText()))) {
                    String lineacuota = "{cedula_ruc : " + ct.getCliente().getRuc() + ","
                            + "cliente:" + ct.getCliente().getCodigo() + ","
                            + "nombre_apellido : '" + ct.getCliente().getNombre() + "',"
                            + "numero_operacion : " + ct.getDocumento() + ","
                            + "descripcion_operacion : '" + ct.getComprobante().getNombre() + "',"
                            + "numero_factura : " + ct.getDocumento() + ","
                            + "nro_cuota : " + ct.getCuota() + ","
                            + "moneda: " + "PYG" + ","
                            + "monto : " + Math.round(ct.getSaldo().doubleValue()) + ","
                            + "fecha_venc : " + ct.getVencimiento() + ","
                            + "estado : " + "PE" + ","
                            + "iddocumento : '" + ct.getIddocumento() + "',"
                            + "creferencia : '" + ct.getCreferencia() + "',"
                            + "gastos : " + Math.round(ct.getGastos().doubleValue()) + ","
                            + "mora : " + Math.round(ct.getMora().doubleValue()) + ","
                            + "punitorio : " + Math.round(ct.getPunitorio().doubleValue()) + ","
                            + "tipoop : " + ct.getComprobante().getCodigo()
                            + "},";
                    detacuota += lineacuota;
                }
                if (!detacuota.equals("[")) {
                    detacuota = detacuota.substring(0, detacuota.length() - 1);
                }
                detacuota += "]";
                System.out.println(detacuota);
                deuDAO.borrarDeudaWeb(Integer.valueOf(cliente.getText()));
                deuDAO.guardarCuentaWeb(detacuota);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "ERROR: " + e.getMessage());
            }
        }
    }
}
